<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}} - Training Track</title>
    <link href="/css/styles.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
</head>
<body class="bg-gray-50 min-h-screen">
    <!-- Navigation -->
    <nav class="bg-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <a href="/courses" class="flex items-center space-x-2">
                        <i class="fas fa-graduation-cap text-blue-600 text-2xl"></i>
                        <span class="font-bold text-xl text-gray-800">Training Track</span>
                    </a>
                </div>
                
                <div class="flex items-center space-x-4">
                    {{#if user}}
                        <div class="flex items-center space-x-4">
                            <a href="/courses" class="text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium">
                                <i class="fas fa-book mr-1"></i> Khóa học
                            </a>
                            
                            <!-- Notification Dropdown -->
                            <div class="relative">
                                <button id="notificationBtn" class="relative text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium">
                                    <i class="fas fa-bell mr-1"></i>
                                    <span id="notificationBadge" class="absolute -top-1 -right-1 bg-red-500 text-white text-xs w-4 h-4 rounded-full flex items-center justify-center">0</span>
                                </button>
                                
                                <div id="notificationDropdown" class="hidden absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border overflow-hidden z-50">
                                    <div class="p-4 border-b">
                                        <div class="flex justify-between items-center">
                                            <h3 class="font-semibold">Thông báo</h3>
                                            <div class="flex items-center gap-2">
                                                <button id="clearReadBtn" class="text-sm text-gray-600 hover:underline">
                                                    Xóa đã đọc
                                                </button>
                                                <button id="markAllRead" class="text-sm text-blue-600 hover:underline">
                                                    Đánh dấu đã đọc
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div id="notificationList" class="max-h-96 overflow-y-auto">
                                        <!-- Notifications will be loaded here -->
                                    </div>
                                    <div id="notificationPagination" class="p-2 border-t bg-gray-50 flex justify-between items-center text-sm">
                                        <button id="prevPage" class="px-3 py-1 bg-white border rounded hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                            <i class="fas fa-chevron-left"></i>
                                        </button>
                                        <span id="paginationInfo">Trang 1/1</span>
                                        <button id="nextPage" class="px-3 py-1 bg-white border rounded hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                            <i class="fas fa-chevron-right"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>

                            {{#if (eq user.role "admin")}}
                                <a href="/admin" class="text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium">
                                    <i class="fas fa-cog mr-1"></i> Quản trị
                                </a>
                            {{/if}}
                            
                            <div class="relative" id="userDropdown">
                                <button id="userMenuButton" class="flex items-center text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                                    <i class="fas fa-user mr-1"></i>
                                    {{user.name}}
                                    <i class="fas fa-chevron-down ml-1 transition-transform duration-200" id="dropdownIcon"></i>
                                </button>
                                <div id="userDropdownMenu" class="absolute right-0 mt-1 w-48 bg-white rounded-md shadow-lg py-1 z-50 hidden transform opacity-0 scale-95 transition-all duration-200 ease-out">
                                    <div class="px-4 py-2 text-sm text-gray-500 border-b">
                                        <div class="font-medium">{{user.name}}</div>
                                        <div class="text-xs">{{user.email}}</div>
                                    </div>
                                    <a href="/auth/logout" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-150">
                                        <i class="fas fa-sign-out-alt mr-2"></i> Đăng xuất
                                    </a>
                                </div>
                            </div>
                        </div>
                    {{/if}}
                </div>
            </div>
        </div>
    </nav>

    <!-- Flash Messages -->
    {{#if success_msg}}
        <div class="max-w-7xl mx-auto mt-4 px-4">
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative" role="alert">
                <span class="block sm:inline">{{success_msg}}</span>
                <span class="absolute top-0 bottom-0 right-0 px-4 py-3 cursor-pointer" onclick="this.parentElement.remove()">
                    <i class="fas fa-times"></i>
                </span>
            </div>
        </div>
    {{/if}}

    {{#if error_msg}}
        <div class="max-w-7xl mx-auto mt-4 px-4">
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                <span class="block sm:inline">{{error_msg}}</span>
                <span class="absolute top-0 bottom-0 right-0 px-4 py-3 cursor-pointer" onclick="this.parentElement.remove()">
                    <i class="fas fa-times"></i>
                </span>
            </div>
        </div>
    {{/if}}

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto py-6 px-4">
        {{{body}}}
    </main>

    <!-- Footer -->
    <footer class="bg-white border-t mt-auto">
        <div class="max-w-7xl mx-auto py-4 px-4 text-center text-gray-600 text-sm">
            © 2024 Training Track. Hệ thống quản lý tiến độ training.
        </div>
    </footer>

    <script>
        // User dropdown menu functionality
        document.addEventListener('DOMContentLoaded', function() {
            const userMenuButton = document.getElementById('userMenuButton');
            const userDropdownMenu = document.getElementById('userDropdownMenu');
            const dropdownIcon = document.getElementById('dropdownIcon');
            const userDropdown = document.getElementById('userDropdown');
            
            if (userMenuButton && userDropdownMenu) {
                let isOpen = false;
                
                // Toggle dropdown on button click
                userMenuButton.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    toggleDropdown();
                });
                
                // Close dropdown when clicking outside
                document.addEventListener('click', function(e) {
                    if (!userDropdown.contains(e.target)) {
                        closeDropdown();
                    }
                });
                
                // Prevent dropdown from closing when clicking inside
                userDropdownMenu.addEventListener('click', function(e) {
                    e.stopPropagation();
                });
                
                // Handle keyboard navigation
                userMenuButton.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        toggleDropdown();
                    } else if (e.key === 'Escape') {
                        closeDropdown();
                    }
                });
                
                function toggleDropdown() {
                    if (isOpen) {
                        closeDropdown();
                    } else {
                        openDropdown();
                    }
                }
                
                function openDropdown() {
                    isOpen = true;
                    userDropdownMenu.classList.remove('hidden');
                    // Trigger reflow
                    userDropdownMenu.offsetHeight;
                    userDropdownMenu.classList.remove('opacity-0', 'scale-95');
                    userDropdownMenu.classList.add('opacity-100', 'scale-100');
                    dropdownIcon.style.transform = 'rotate(180deg)';
                    userMenuButton.setAttribute('aria-expanded', 'true');
                }
                
                function closeDropdown() {
                    if (!isOpen) return;
                    isOpen = false;
                    userDropdownMenu.classList.remove('opacity-100', 'scale-100');
                    userDropdownMenu.classList.add('opacity-0', 'scale-95');
                    dropdownIcon.style.transform = 'rotate(0deg)';
                    userMenuButton.setAttribute('aria-expanded', 'false');
                    // Hide after transition
                    setTimeout(() => {
                        if (!isOpen) {
                            userDropdownMenu.classList.add('hidden');
                        }
                    }, 200);
                }
            }
        });

        // Auto hide flash messages
        setTimeout(function() {
            const alerts = document.querySelectorAll('[role="alert"]');
            alerts.forEach(alert => {
                alert.style.transition = 'opacity 0.5s';
                alert.style.opacity = '0';
                setTimeout(() => alert.remove(), 500);
            });
        }, 5000);

        // Notification Functions
        let notifications = [];
        let currentPage = 1;
        let totalPages = 1;
        const ITEMS_PER_PAGE = 10;

        async function fetchNotifications(page = 1) {
            try {
                const response = await fetch(`/notifications?page=${page}&limit=${ITEMS_PER_PAGE}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch notifications');
                }
                const data = await response.json();
                notifications = data.notifications;
                currentPage = data.pagination.currentPage;
                totalPages = data.pagination.totalPages;
                
                renderNotifications();
                updatePagination();
                updateNotificationBadge();
            } catch (error) {
                console.error('Error fetching notifications:', error);
                showToast('Không thể tải thông báo', 'error');
            }
        }

        function renderNotifications() {
            const notificationList = document.getElementById('notificationList');
            if (!notificationList) return;

            notificationList.innerHTML = notifications.length ? notifications.map(notification => `
                <div class="notification-item p-4 border-b hover:bg-gray-50 cursor-pointer ${!notification.isRead ? 'bg-blue-50' : ''}" 
                     onclick="handleNotificationClick('${notification.id}', '${notification.link || ''}')">
                    <div class="flex items-start gap-3">
                        <div class="flex-1">
                            <h4 class="font-semibold">${notification.title}</h4>
                            <p class="text-gray-600 text-sm">${notification.content}</p>
                            <span class="text-gray-400 text-xs">${formatDate(notification.createdAt)}</span>
                        </div>
                        ${!notification.isRead ? '<div class="w-2 h-2 rounded-full bg-blue-500"></div>' : ''}
                    </div>
                </div>
            `).join('') : '<div class="p-4 text-center text-gray-500">Không có thông báo mới</div>';
        }

        function updatePagination() {
            const paginationInfo = document.getElementById('paginationInfo');
            const prevBtn = document.getElementById('prevPage');
            const nextBtn = document.getElementById('nextPage');

            if (paginationInfo) {
                paginationInfo.textContent = `Trang ${currentPage}/${totalPages}`;
            }

            if (prevBtn) {
                prevBtn.disabled = currentPage <= 1;
            }

            if (nextBtn) {
                nextBtn.disabled = currentPage >= totalPages;
            }
        }

        async function updateNotificationBadge() {
            try {
                const response = await fetch('/notifications/unread-count');
                const data = await response.json();
                const badge = document.getElementById('notificationBadge');
                
                if (badge) {
                    badge.textContent = data.count;
                    badge.classList.toggle('hidden', data.count === 0);
                }
            } catch (error) {
                console.error('Error updating badge:', error);
            }
        }

        async function handleNotificationClick(id, link) {
            try {
                await markAsRead(id);
                if (link) {
                    window.location.href = link;
                }
            } catch (error) {
                console.error('Error handling notification click:', error);
            }
        }

        async function markAsRead(id) {
            try {
                const response = await fetch(`/notifications/${id}/read`, {
                    method: 'PUT'
                });
                if (!response.ok) {
                    throw new Error('Failed to mark notification as read');
                }
                await fetchNotifications(currentPage);
            } catch (error) {
                console.error('Error marking notification as read:', error);
                showToast('Không thể đánh dấu đã đọc', 'error');
            }
        }

        async function markAllAsRead() {
            try {
                const response = await fetch('/notifications/read-all', {
                    method: 'PUT'
                });
                if (!response.ok) {
                    throw new Error('Failed to mark all notifications as read');
                }
                await fetchNotifications(currentPage);
                showToast('Đã đánh dấu tất cả là đã đọc', 'success');
            } catch (error) {
                console.error('Error marking all notifications as read:', error);
                showToast('Có lỗi xảy ra', 'error');
            }
        }

        async function clearReadNotifications() {
            try {
                const response = await fetch('/notifications/clear-read', {
                    method: 'DELETE'
                });
                if (!response.ok) {
                    throw new Error('Failed to clear read notifications');
                }
                await fetchNotifications(1); // Reset to first page after clearing
                showToast('Đã xóa tất cả thông báo đã đọc', 'success');
            } catch (error) {
                console.error('Error clearing read notifications:', error);
                showToast('Có lỗi xảy ra', 'error');
            }
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            const now = new Date();
            const diff = now - date;

            // Less than 1 minute
            if (diff < 60000) {
                return 'Vừa xong';
            }
            // Less than 1 hour
            if (diff < 3600000) {
                const minutes = Math.floor(diff / 60000);
                return `${minutes} phút trước`;
            }
            // Less than 1 day
            if (diff < 86400000) {
                const hours = Math.floor(diff / 3600000);
                return `${hours} giờ trước`;
            }
            // Less than 7 days
            if (diff < 604800000) {
                const days = Math.floor(diff / 86400000);
                return `${days} ngày trước`;
            }
            // Default format
            return date.toLocaleDateString('vi-VN', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        // Event Listeners
        document.addEventListener('DOMContentLoaded', () => {
            const notificationBtn = document.getElementById('notificationBtn');
            const notificationDropdown = document.getElementById('notificationDropdown');
            const markAllReadBtn = document.getElementById('markAllRead');
            const clearReadBtn = document.getElementById('clearReadBtn');
            const prevPageBtn = document.getElementById('prevPage');
            const nextPageBtn = document.getElementById('nextPage');

            if (notificationBtn) {
                // Initial fetch
                fetchNotifications();

                // Toggle dropdown
                notificationBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    notificationDropdown.classList.toggle('hidden');
                });

                // Close dropdown when clicking outside
                document.addEventListener('click', (e) => {
                    if (!notificationBtn.contains(e.target) && !notificationDropdown.contains(e.target)) {
                        notificationDropdown.classList.add('hidden');
                    }
                });

                // Pagination handlers
                if (prevPageBtn) {
                    prevPageBtn.addEventListener('click', () => {
                        if (currentPage > 1) {
                            fetchNotifications(currentPage - 1);
                        }
                    });
                }

                if (nextPageBtn) {
                    nextPageBtn.addEventListener('click', () => {
                        if (currentPage < totalPages) {
                            fetchNotifications(currentPage + 1);
                        }
                    });
                }

                // Action buttons
                if (markAllReadBtn) {
                    markAllReadBtn.addEventListener('click', markAllAsRead);
                }

                if (clearReadBtn) {
                    clearReadBtn.addEventListener('click', clearReadNotifications);
                }

                // Update notifications every 30s
                setInterval(() => fetchNotifications(currentPage), 30000);
            }
        });

        // Toast function
        function showToast(message, type = 'success') {
            const colors = {
                success: 'linear-gradient(to right, #00b09b, #96c93d)',
                error: 'linear-gradient(to right, #ff5f6d, #ffc371)',
                info: 'linear-gradient(to right, #2193b0, #6dd5ed)'
            };

            Toastify({
                text: message,
                duration: 3000,
                gravity: "top",
                position: "right",
                style: {
                    background: colors[type]
                }
            }).showToast();
        }

        // Show flash messages as toasts
        {{#if success}}
            showToast("{{success}}", "success");
        {{/if}}
        {{#if error}}
            showToast("{{error}}", "error");
        {{/if}}
    </script>
</body>
</html> 